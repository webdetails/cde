<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Community Dashboard Editor" basedir="." default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the Dashboard Designer project
    and works with the subfloor.xml file.
  </description>

 
  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />

  <property name="js.karma.config" value="karma.conf.js"/>

  <!-- Properties are immutable, set them before loading subfloor.xml, make sure when junit tests fail the build fails -->
  <property name="junit.haltonfailure" value="yes" description="Fail the build if a test fails"/>
  <property name="junit.haltonerror" value="yes" description="Fail the build if a error occurs"/>
  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor-pkg.xml" id="subfloor-pkg"/>
  <import file="../build-res/subfloor-js.xml"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN subfloor.xml.
    -->

  <!-- Global properties -->
  <property name='pentaho-base.dir' value='../cde-pentaho-base' description="Name of pentaho base dir"/>
  <property name='core.dir' value='../cde-core' description="Name of core dir"/>
  <property name="plugin.name" value="pentaho-cdf-dd" description="Name of the plugin"/>
  <property name="resource.dir" value="resource" description="Name of the resource directory"/>
  <property name="includes.name" value="editor.includes.properties"/>
  <property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory"/>
  <property name="solution.stage.dir" value="${bin.dir}/stage-solution" description="Name of the resource directory"/>

  <!-- Resources location -->
  <property name='core-resource.dir' value='${core.dir}/${resource.dir}'/>
  <property name='pentaho-base-resource.dir' value='${pentaho-base.dir}/${resource.dir}'/>
  <!-- Extra Source Dir Locations -->
  <property name='pentaho-base-src.dir' value='${pentaho-base.dir}/src'/>
  <!-- Properties for includes -->
  <property file='../cde-core/resource/editor.includes.properties'/>
  <property file='${pentaho-base-resource.dir}/${includes.name}'/>
  <property file='resource/editor.includes.properties'/>
  <property name='includes.path' value='${stage.dir}/${plugin.name}/${includes.name}'/>

  <!-- karma config files -->
  <property name="js.karma.ci.config.legacy" value="config/karma.ci.conf.legacy.js"/>
  <property name="bin.test-js.dir" value="${bin.dir}/test-js" description='Karma tests js source dir' />
  <property name="bin.test-js.cdf.dir" value="${bin.test-js.dir}/cdf" description='CDF for Karma tests' />

  <!-- compilation/minification -->
  <property name="build.js.path" value="config/cde.build.compile.js" description="cde.build.compile.js location"/>

  <property name="runtimelib.dir" value="${basedir}/runtime-lib"
          description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)"/>

  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
        <fileset dir="runtime-lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <src path="${src.dir}"/>
      <src path="../cde-pentaho-base/src"/>
    </javac>
  </target>

  <!-- overrides subfloor clean to also cleanup runtime-lib -->
  <target name="clean" depends="subfloor.clean, subfloor-js.clean-js">
    <delete dir="${runtimelib.dir}" verbose="true"/>
    <delete dir="${js.node.node_modules.dir}" verbose="true"/>
    <delete dir="${package.resdir}" verbose="true"/>
    <delete dir="build-res" verbose="true"/>
  </target>

  <tstamp/>

  <echo>project.revision = ${project.revision}</echo>

  <target name="dist" depends="clean, resolve, jar, write-properties, write-patches, dist-plugin, dist-solution"/>
  <target name="dist-compile" depends="jar, dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
  <property name="plugin.disabled.zipfile" value="${plugin.artifact.id}-disabled-${project.revision}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>

  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries"/>

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime"/>
    <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]"/>
  </target>


  <!--=======================================================================
  dist

  Creates a distribution of this project's plugin zip
  ====================================================================-->
  <target name="make-stage">
    <!-- Make dirs -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>
    <mkdir dir="${stage.dir}/${plugin.name}/resources"/>                
  </target>

  <target name="dist-plugin" depends="jar, make-stage, check-pentaho-js-build-downloaded, subfloor-js.resolve-js" description="Creates a distribution">

    <!-- delete the dir that contains the sources to be optimized -->
    <delete dir="${js.module.script.agg.dir}"/>
    <echo message="js.module.script.agg.dir: ${js.module.script.agg.dir}"/>
    <mkdir dir="${js.module.script.agg.dir}"/>

    <!-- unzip CDF into js-lib/expanded/pentaho-cdf -->
    <unzip dest="${js.expanded.lib.dir}" overwrite="true">
      <fileset dir=".">
        <include name="${js.lib.dir}/pentaho-cdf*.zip"/>
      </fileset>
    </unzip>

    <!-- copy requirejs loader plugins & other CDF dependencies -->
    <copy todir='${js.module.script.agg.dir}/cdf' overwrite='true'>
      <fileset dir='${js.expanded.lib.dir}/cdf'>
        <!-- including only required dependencies makes the optimization much faster -->
        <include name="js/lib/require-css/**/*"/>
        <include name="js/lib/require-amd/**/*"/>
        <include name="js/lib/require-dashboard/**/*"/>
        <include name="js/lib/require-text/**/*"/>
        <include name="js/lib/Raphael/raphael.js"/>
        <include name="js/lib/jQuery/jquery.js"/>
        <include name="js/lib/jquery-migrate-1.2.1.js"/>
        <include name="js/lib/fancybox/jquery.fancybox.css"/>
        <include name="js/lib/fancybox/jquery.fancybox.js"/>
        <include name="js/components/CggComponent.ext.js"/>
        <include name="js/lib/backboneTreemodel/backbone.treemodel.js"/>
        <include name="js/lib/baseEvents/**"/>
        <include name="js/lib/baseSelectionTree/**"/>
        <include name="js/lib/backbone/backbone.js"/>
        <include name="js/lib/underscore/underscore.js"/>
        <include name="js/lib/OpenMap/OpenLayers/theme/default/style.css"/>
      </fileset>
    </copy>

    <!-- copy AMD custom components to tmp dir -->
    <echo message="Copying AMD custom components files to ${js.module.script.agg.dir}/amd-components"/>
    <!-- copy cde-core resources to tmp dir -->
    <copy todir='${js.module.script.agg.dir}/amd-components'>
      <fileset dir='${core-resource.dir}/resources/custom/amd-components/'/>
    </copy>
    <!-- copy cde-pentaho-base resources to tmp dir -->
    <!-- copy cde-pentaho5 resources to tmp dir -->
    <copy todir='${js.module.script.agg.dir}/amd-components'>
      <fileset dir='${resource.dir}/resources/custom/amd-components/'/>
    </copy>

    <!-- merge require-js configuration files -->
    <delete file="build-res/requireCfg-raw.js" />
    <delete file="build-res/requireCfg.js" />
    <echo message="var requireCfg={paths:{},shim:{}};" file="build-res/requireCfg-raw.js" force="true" append="false"/>
    <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
      <!-- cdf requirejs cfg files -->
      <fileset dir="${js.expanded.lib.dir}/cdf/js" casesensitive="yes">
        <include name="cdf-require-js-cfg.js"/>
      </fileset>
      <!-- cde require-js cfg files -->
      <fileset dir="${core-resource.dir}/js" casesensitive="yes">
        <include name="cde-core-require-js-cfg.js"/>
      </fileset>
    </concat>
    <echo message="require(requireCfg);" append="false" file="build-res/requireCfg.js"/>

    <path id="build.classpath">
      <fileset dir="build-res/pentaho-js-build/libs"> <!-- temporary until core build files in artifactory -->
        <include name="*.jar"/>
      </fileset>
    </path>

    <java classname="org.mozilla.javascript.tools.shell.Main"
          fork="true"
          classpathref="build.classpath">
      <arg value="build-res/pentaho-js-build/profileBuilder.js"/>
    </java>

    <!-- run js compilation -->
    <exec executable="node" failonerror="true">
      <arg value="build-res/pentaho-js-build/r.js"/>
      <arg value="-o"/>
      <arg value="${build.js.path}"/>
    </exec>

    <!-- copy compressed/minified files from bin/scriptOutput to compressed folder -->
    <copy todir="${stage.dir}/${plugin.name}/resources/custom/amd-components-compressed" >
      <fileset dir="${js.build.output.dir}/amd-components"/>
    </copy>

    <!-- Copy core resources -->
    <copy todir='${stage.dir}/${plugin.name}'>
      <fileset dir='${core-resource.dir}'>
        <exclude name="${includes.name}"/>
        <exclude name="**/OlapSelector/test/**"/>
        <!-- don't exclude the files used in 5.4.0.1 for legacy compatibility using the old plugin.xml -->
        <!-- exclude name="**/*-require-js-cfg.js"/ -->
      </fileset>
    </copy>

    <!-- Copy pentaho-base resources -->
    <copy todir='${stage.dir}/${plugin.name}' overwrite='true'>
      <fileset dir='${pentaho-base-resource.dir}'>
        <exclude name="${includes.name}"/>
      </fileset>
    </copy>

    <!-- Copy pentaho resources -->
    <copy todir='${stage.dir}/${plugin.name}' overwrite='true'>
      <fileset dir='${resource.dir}'>
        <exclude name="${includes.name}"/>
        <!-- don't exclude the files used in 5.4.0.1 for legacy compatibility using the old plugin.xml -->
        <!-- exclude name="**/*-require-js-cfg.js"/ -->
      </fileset>
    </copy>

    <!-- create an aggregated "cde-require-js-cfg.js" RequireJS config file -->
    <concat destfile="${stage.dir}/${plugin.name}/js/cde-require-js-cfg.js" append="true" force="yes">
      <!-- CDE core RequireJS cfg file -->
      <fileset dir="${core-resource.dir}" casesensitive="yes">
        <include name="**/*-require-js-cfg.js"/>
      </fileset>
      <!-- CDE RequireJS cfg files -->
      <fileset dir="${resource.dir}" casesensitive="yes">
        <include name="**/*-require-js-cfg.js"/>
      </fileset>
    </concat>

    <antcall target="replace-ext-editor-labels"/>
    <antcall target="replace-editor-labels"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="runtime-lib">
        <include name="cpf-*.jar"/>
        <include name="cde-*.jar"/>

        <!-- PTEIXEIRA, 10-09-2013, decurring of cde core-refactor -->
        <!-- not happy with this, could use some re-thinking -->
        <include name="json-*.jar"/>
        <include name="ezmorph-*.jar"/>
      </fileset>
    </copy>


    <!-- create the version file -->
    <tstamp/>
    <property name="sequential.build.id" value="manual-${DSTAMP}"/>
    <echo file="${stage.dir}/${plugin.name}/version.xml"
          message="&lt;version branch='${project.stage}'  buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>


    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="${plugin.artifact.id}/**/*"
         excludes="**/Thumbs.db"/>

    <copy todir="${stage.dir}/${plugin.name}-disabled/${plugin.name}" overwrite="true">
      <fileset dir="${stage.dir}/${plugin.name}"/>
    </copy>

    <copy file="${stage.dir}/${plugin.name}-disabled/${plugin.name}/plugin.xml.disabled"
          tofile="${stage.dir}/${plugin.name}-disabled/${plugin.name}/plugin.xml" overwrite="true"/>
    <copy file="${stage.dir}/${plugin.name}-disabled/${plugin.name}/settings.xml.disabled"
          tofile="${stage.dir}/${plugin.name}-disabled/${plugin.name}/settings.xml" overwrite="true"/>


    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.disabled.zipfile}"
         basedir="${stage.dir}/${plugin.name}-disabled"
         includes="${plugin.artifact.id}/**/*"
         excludes="**/Thumbs.db"/>


    <echo file="${dist.dir}/marketplace.xml">
      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${project.revision}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url}
        &lt;/package_url&gt;
        &lt;samples_url&gt;
          ${marketplace.metadata.samples_url}
        &lt;/samples_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version}&lt;/min_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;
    </echo>
  </target>

  <target name="dist-solution" depends="init">
    <!-- create solution stage dir -->
    <mkdir dir="${solution.stage.dir}"/>
    <!-- copy all solution files to the solution stage dir -->
    <copy todir="${solution.stage.dir}" overwrite="true">
      <fileset dir="./solution">
        <include name="pentaho-cdf-dd/**/*"/>
      </fileset>
    </copy>
    <!-- compress the solution stage dir -->
    <zip zipfile="${dist.dir}/${plugin.solution.zipfile}"
         basedir="${solution.stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db"/>
  </target>

  <!--=======================================================================
        install-plugin

        Installs the plugin locally
        ====================================================================-->
  <target name="install-plugin" depends="dist" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy solution -->
    <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
      <fileset dir="${solution.stage.dir}/">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="write-properties" depends="make-stage">
    <!-- Create editor.includes.properties -->
    <echo file="${stage.dir}/${plugin.name}/${includes.name}"/>
    <for list='${core-scripts}' param='filename'>
      <sequential>
        <propertyfile file="${includes.path}">
          <entry key="scripts" operation="+" value="@{filename}," />
        </propertyfile>
      </sequential>
    </for>
    <for list='${pentaho-base-scripts}' param='filename'>
      <sequential>
        <propertyfile file="${includes.path}">
          <entry key="scripts" operation="+" value="@{filename}," />
        </propertyfile>
      </sequential>
    </for>
    <for list='${pentaho-scripts}' param='filename'>
      <sequential>
        <propertyfile file="${includes.path}">
          <entry key="scripts" operation="+" value="@{filename}," />
        </propertyfile>
      </sequential>
    </for>

    <for list='${core-styles}' param='filename'>
      <sequential>
        <propertyfile file="${includes.path}">
          <entry key="styles" operation="+" value="@{filename}," />
        </propertyfile>
      </sequential>
    </for>
    <for list='${pentaho-base-styles}' param='filename'>
      <sequential>
        <propertyfile file="${includes.path}">
          <entry key="styles" operation="+" value="@{filename}," />
        </propertyfile>
      </sequential>
    </for>
    <for list='${pentaho-styles}' param='filename'>
      <sequential>
        <propertyfile file="${includes.path}">
          <entry key="styles" operation="+" value="@{filename}," />
        </propertyfile>
      </sequential>
    </for>
  </target>

  <target name="write-patches" depends="write-properties">
    <property name="scripts.patch" value="${stage.dir}/${plugin.name}/resources/scripts.html"/>
    <property name="styles.patch" value="${stage.dir}/${plugin.name}/resources/styles.html"/>
    <property file="${includes.path}"/>

    <touch file='${scripts.patch}'/>
    <echo file='${scripts.patch}' append='false'/>
    <for list='${scripts}' param='filename'>
      <sequential>
        <echo file='${scripts.patch}' append='true'>&lt;script language="javascript" type="text/javascript"
              src="#{WEBAPP_PATH}@{filename}"/&gt;&lt;/script&gt;&#13;&#10;</echo>
      </sequential>
    </for>

    <echo file='${styles.patch}' append='false'/>
    <for list='${styles}' param='filename'>
      <sequential>
        <echo file='${styles.patch}' append='true'>&lt;link href="#{WEBAPP_PATH}@{filename}" rel="stylesheet" type="text/css"/&gt;&#13;&#10;</echo>
      </sequential>
    </for>
  </target>

  <target name='replace-ext-editor-labels'>
    <property file="${basedir}/build.properties"/>
    <replace file="${stage.dir}/${plugin.name}/resources/ext-editor.html" token="@CDE_RESOURCES_BASE_URL@" value="${cde.resources.base.url}" />
    <replace file="${stage.dir}/${plugin.name}/resources/ext-editor.html" token="@CDF_RESOURCES_BASE_URL@" value="${cdf.resources.base.url}" />

    <replace file="${stage.dir}/${plugin.name}/resources/cdf-dd-component-editor.html" token="@CDE_RESOURCES_BASE_URL@" value="${cde.resources.base.url}" />
    <replace file="${stage.dir}/${plugin.name}/resources/cdf-dd-component-editor.html" token="@CDF_RESOURCES_BASE_URL@" value="${cdf.resources.base.url}" />
  </target>

  <!-- used to build two different editors -->
  <target name='replace-editor-labels'>
    <copy file="${stage.dir}/${plugin.name}/resources/cdf-dd.html" tofile="${stage.dir}/${plugin.name}/resources/cdf-dd-default.html"/>

    <property file="${basedir}/build.properties"/>
    <replace file="${stage.dir}/${plugin.name}/resources/cdf-dd.html" token="@CDE_RESOURCES_BASE_URL@" value="${cde.resources.base.url}" />
    <replace file="${stage.dir}/${plugin.name}/resources/cdf-dd.html" token="@CDF_RESOURCES_BASE_URL@" value="${cdf.resources.base.url}" />
    <replace file="${stage.dir}/${plugin.name}/resources/cdf-dd-default.html" token="@CDE_RESOURCES_BASE_URL@" value="${cde.resources.base.url.default}" />
    <replace file="${stage.dir}/${plugin.name}/resources/cdf-dd-default.html" token="@CDF_RESOURCES_BASE_URL@" value="${cdf.resources.base.url.default}" />
  </target>

  <!-- Overriding retrieve pattern to distinguish artifacts from same module -->
  <target name="resolve-test" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="test" />
    <ivy:retrieve conf="test" pattern="${testlib.dir}/[artifact]-[revision](-[classifier]).[ext]" />
  </target>


  <target name="publish-nojar" depends="subfloor-pkg.publish-nojar">
    <ivy:makepom ivyfile="package-ivy-samples.xml" pomfile="samples-pom.xml" />   
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml" />
      <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}" />
    </antcall>   
    
    <ivy:makepom ivyfile="package-ivy-disabled.xml" pomfile="disabled-pom.xml" />   
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="disabled-pom.xml" />
      <param name="publish.file" value="${dist.dir}/${plugin.disabled.zipfile}" />
    </antcall>   
  </target>

  <target name="run-karma" depends="install-antcontrib, npm-install">
    <if>
      <available file="${js.karma.ci.config}"/>
      <then>
        <if>
          <isset property="isWindows"/>
          <then>
            <if>
              <not>
                <isset property="karma-for-windows-is-available"/>
              </not>
              <then>
                <fail>Run 'npm install -g karma-cli' [adds karma.cmd to the command line]</fail>
              </then>
            </if>
            <exec executable="karma.cmd" failonerror="${js.karma.failonerror}">
              <arg value="start"/>
              <arg value="${js.karma.ci.config}"/>
              <!-- if we are running via ant, then assume we must 'single-run' -->
              <arg value="--single-run"/>
            </exec>
          </then>
          <else>
            <exec executable="node_modules/karma/bin/karma" failonerror="${js.karma.failonerror}">
              <arg value="start"/>
              <arg value="${js.karma.ci.config}"/>
              <!-- if we are running via ant, then assume we must 'single-run' -->
              <arg value="--single-run"/>
            </exec>
          </else>
        </if>
      </then>
      <else>
        <fail>There is no karma configuration file available (looking for: ${js.karma.ci.config})</fail>
      </else>
    </if>
  </target>

  <target name="test-js-require" depends="subfloor-js.resolve-js">

    <!-- unzip CDF into js-lib/expanded/pentaho-cdf -->
    <unzip dest="${js.expanded.lib.dir}" overwrite="true">
      <fileset dir=".">
        <include name="${js.lib.dir}/pentaho-cdf*.zip"/>
      </fileset>
    </unzip>

    <!-- copy CDF into bin/test-js/cdf -->
    <copy todir="${bin.test-js.cdf.dir}" overwrite="true">
      <fileset dir="${js.expanded.lib.dir}/cdf"/>
    </copy>

    <!-- compile the require file -->
    <echo message="Collecting RequireJS Configurations"/>
    <delete file="build-res/requireCfg-raw.js"/>
    <concat destfile="build-res/requireCfg-raw.js" append="true" force="yes">
      <!-- cdf require-js cfg files -->
      <fileset dir="${js.expanded.lib.dir}/cdf" casesensitive="yes">
        <include name="cdf-require-js-cfg.js"/>
      </fileset>
      <!-- cde require-js cfg files -->
      <fileset dir="../cde-core/resource/js" casesensitive="yes">
        <include name="*-require-js-cfg.js"/>
      </fileset>
      <fileset dir="resource/js" casesensitive="yes">
        <include name="*-require-js-cfg.js"/>
      </fileset>
    </concat>

    <!-- run karma -->
    <antcall target="run-karma"/>
  </target>

  <target name="test-js-legacy">
    <antcall target="run-karma">
      <param name="js.karma.ci.config" value="${js.karma.ci.config.legacy}"/>
    </antcall>
  </target>

  <target name="test-js" depends="test-js-require, test-js-legacy">
  </target>

  <target name="continuous" depends="subfloor.continuous, test-js"/>

</project>
